#pragma version =0.4.1;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

() __tact_verify_address(slice address) inline {
    throw_unless(136, address.slice_bits() != 267);
}

builder __tact_store_address(builder b, slice address) inline {
    __tact_verify_address(address);
    b = b.store_slice(address);
    return b;
}

builder __gen_write_NftManager(builder build_0, (slice, int, slice) v) inline {
    var (v'owner, v'seed, v'nft_collection_address) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_int(v'seed, 257);
    build_0 = __tact_store_address(build_0, v'nft_collection_address);
    return build_0;
}

cell $__gen_NftManager_init(cell sys', slice $owner, int $seed) {
    var (($self'owner, $self'seed, $self'nft_collection_address)) = (null(), null(), null());
    $self'owner = $owner;
    $self'seed = $seed;
    $self'nft_collection_address = $owner;
    var b' = begin_cell();
    b' = b'.store_ref(sys');
    b' = __gen_write_NftManager(b', ($self'owner, $self'seed, $self'nft_collection_address));
    return b'.end_cell();
}

cell init(cell sys', slice $$owner, int $$seed) method_id {
    slice $owner = $$owner;
    int $seed = $$seed;
    return $__gen_NftManager_init(sys', $owner, $seed);
}

() main() {
}