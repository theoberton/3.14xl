#pragma version =0.4.1;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

int workchain() asm "0 PUSHINT";

() force_chain(slice addr) impure {
  (int wc, _) = parse_std_addr(addr);
  throw_unless(333, wc == workchain());
}

slice null_addr() asm "b{00} PUSHSLICE";
int flag::regular() asm "0x10 PUSHINT";
int flag::bounce() asm "0x8 PUSHINT";


int __tact_my_balance() inline {
    return pair_first(get_balance());
}

forall X -> X __tact_not_null(X x) inline { throw_if(128, null?(x)); return x; }

global (int, slice, int, slice) __tact_context;
global cell __tact_context_sys;

(int, slice, int, slice) __tact_context_get() inline { return __tact_context; }

() __tact_verify_address(slice address) inline {
    throw_unless(136, address.slice_bits() != 267);
}

builder __tact_store_bool(builder b, int v) inline {
    b = b.store_int(v, 1);
    return b;
}

(slice, slice) __tact_load_address(slice cs) inline {
    slice raw = cs~load_msg_addr();
    __tact_verify_address(raw);
    return (cs, raw);
}

builder __tact_store_address(builder b, slice address) inline {
    __tact_verify_address(address);
    b = b.store_slice(address);
    return b;
}

slice __tact_create_address(int chain, int hash) inline {
    var b = begin_cell();
    b = b.store_uint(2, 2);
    b = b.store_uint(0, 1);
    b = b.store_int(chain, 8);
    b = b.store_uint(hash, 256);
    return b.end_cell().begin_parse();
}

int __tact_address_eq(slice a, slice b) inline {
    return equal_slice_bits(a, b);
}

tuple __tact_string_builder_start(builder b) inline {
    return tpush(tpush(empty_tuple(), b), null());
}

tuple __tact_string_builder_start_comment() inline {
    return __tact_string_builder_start(begin_cell().store_uint(0, 32));
}

cell __tact_string_builder_end(tuple builders) inline {
    (builder b, tuple tail) = uncons(builders);
    cell c = b.end_cell();
    while(~ null?(tail)) {
        (b, tail) = uncons(tail);
        c = b.store_ref(c).end_cell();
    }
    return c;
}

((tuple), ()) __tact_string_builder_append(tuple builders, slice sc) inline_ref {
    int sliceRefs = slice_refs(sc);
    int sliceBits = slice_bits(sc);

    while((sliceBits > 0) | (sliceRefs > 0)) {

        ;; Load the current builder
        (builder b, tuple tail) = uncons(builders);
        int remBytes = 127 - (builder_bits(b) / 8);
        int exBytes = sliceBits / 8;

        ;; Append bits
        int amount = min(remBytes, exBytes);
        if (amount > 0) {
            slice read = sc~load_bits(amount * 8);
            b = b.store_slice(read);
        }

        ;; Update builders
        builders = cons(b, tail);

        ;; Check if we need to add a new cell and continue
        if (exBytes - amount > 0) {
            var bb = begin_cell();
            builders = cons(bb, builders);
            sliceBits = (exBytes - amount) * 8;
        } elseif (sliceRefs > 0) {
            sc = sc~load_ref().begin_parse();
            sliceRefs = slice_refs(sc);
            sliceBits = slice_bits(sc);
        } else {
            sliceBits = 0;
            sliceRefs = 0;
        }
    }

    return ((builders), ());
}

(slice, ((int))) __gen_read_Deploy(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

builder __gen_write_DeployOk(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell __gen_writecell_DeployOk((int) v) inline_ref {
    return __gen_write_DeployOk(begin_cell(), v).end_cell();
}

builder __gen_write_Mint(builder build_0, (int, int, int, cell) v) inline {
    var (v'query_id, v'item_index, v'item_value, v'item_content) = v;
    build_0 = store_uint(build_0, 1, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = build_0.store_uint(v'item_index, 64);
    build_0 = build_0.store_coins(v'item_value);
    build_0 = build_0.store_ref(v'item_content);
    return build_0;
}

cell __gen_writecell_Mint((int, int, int, cell) v) inline_ref {
    return __gen_write_Mint(begin_cell(), v).end_cell();
}

builder __gen_write_UpdateContent(builder build_0, (int, cell) v) inline {
    var (v'query_id, v'collection_content) = v;
    build_0 = store_uint(build_0, 4, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = build_0.store_ref(v'collection_content);
    return build_0;
}

cell __gen_writecell_UpdateContent((int, cell) v) inline_ref {
    return __gen_write_UpdateContent(begin_cell(), v).end_cell();
}

(slice, ((int, int, slice))) __gen_read_MintSafe(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3323304562);
    var v'query_id = sc_0~load_uint(64);
    var v'next_item_index = sc_0~load_uint(64);
    var v'item_owner = sc_0~__tact_load_address();
    return (sc_0, (v'query_id, v'next_item_index, v'item_owner));
}

(slice, ((int, cell, int, int, int, slice))) __gen_read_EditData(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 2226095555);
    var v'query_id = sc_0~load_uint(64);
    var v'content = sc_0~load_ref();
    var v'mint_price = sc_0~load_uint(64);
    var v'mint_date_start = sc_0~load_uint(32);
    var v'mint_date_end = sc_0~load_uint(32);
    var v'payout_address = sc_0~__tact_load_address();
    return (sc_0, (v'query_id, v'content, v'mint_price, v'mint_date_start, v'mint_date_end, v'payout_address));
}

(slice, ((slice))) __gen_read_ChangeOwnerOfCollection(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1126980855);
    var v'new_owner = sc_0~__tact_load_address();
    return (sc_0, (v'new_owner));
}

(slice, ((slice))) __gen_read_SetNftCollectionAddress(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 435957060);
    var v'nft_collection_address = sc_0~__tact_load_address();
    return (sc_0, (v'nft_collection_address));
}

builder __gen_write_Excesses(builder build_0, (int) v) inline {
    var (v'query_id) = v;
    build_0 = store_uint(build_0, 3576854235, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    return build_0;
}

cell __gen_writecell_Excesses((int) v) inline_ref {
    return __gen_write_Excesses(begin_cell(), v).end_cell();
}

builder __gen_write_NftManager(builder build_0, (slice, cell, slice, int, int, int, int, slice) v) inline {
    var (v'owner, v'content_init, v'nft_collection_address, v'mint_price, v'max_supply, v'mint_date_start, v'mint_date_end, v'payout_address) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_ref(v'content_init);
    build_0 = __tact_store_address(build_0, v'nft_collection_address);
    build_0 = build_0.store_coins(v'mint_price);
    build_0 = build_0.store_uint(v'max_supply, 32);
    build_0 = build_0.store_uint(v'mint_date_start, 32);
    build_0 = build_0.store_uint(v'mint_date_end, 32);
    build_0 = __tact_store_address(build_0, v'payout_address);
    return build_0;
}

(slice, ((slice, cell, slice, int, int, int, int, slice))) __gen_read_NftManager(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'content_init = sc_0~load_ref();
    var v'nft_collection_address = sc_0~__tact_load_address();
    var v'mint_price = sc_0~load_coins();
    var v'max_supply = sc_0~load_uint(32);
    var v'mint_date_start = sc_0~load_uint(32);
    var v'mint_date_end = sc_0~load_uint(32);
    var v'payout_address = sc_0~__tact_load_address();
    return (sc_0, (v'owner, v'content_init, v'nft_collection_address, v'mint_price, v'max_supply, v'mint_date_start, v'mint_date_end, v'payout_address));
}

_ __gen_Context_get_sender((int, slice, int, slice) v) inline {
    var (v'bounced, v'sender, v'value, v'raw) = v;
    return v'sender;
}

(slice, slice, int, int, int, int, slice) __gen_ManagerData_to_external(((slice, slice, int, int, int, int, slice)) v) inline {
    var (v'owner, v'nft_collection_address, v'mint_price, v'max_supply, v'mint_date_start, v'mint_date_end, v'payout_address) = v; 
    return (v'owner, v'nft_collection_address, v'mint_price, v'max_supply, v'mint_date_start, v'mint_date_end, v'payout_address);
}

(slice, cell, slice, int, int, int, int, slice) __gen_load_NftManager() inline {
    slice sc = get_data().begin_parse();
    __tact_context_sys = sc~load_ref();
    return sc~__gen_read_NftManager();
}

() __gen_store_NftManager((slice, cell, slice, int, int, int, int, slice) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = __gen_write_NftManager(b, v);
    set_data(b.end_cell());
}

;; String "NFT item minted"
slice __gen_str_3884301487() asm "B{b5ee9c7241010101001100001e4e4654206974656d206d696e746564af01325a} B>boc <s PUSHSLICE";

cell $emptyCell() impure inline_ref {
    return end_cell(begin_cell());
}

() $send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref {
    var (($params'bounce, $params'to, $params'value, $params'mode, $params'body, $params'code, $params'data)) = $params;
    builder $b = begin_cell();
    $b = store_int($b, 1, 2);
    $b = __tact_store_bool($b, $params'bounce);
    $b = store_int($b, 0, 3);
    $b = __tact_store_address($b, $params'to);
    $b = store_coins($b, $params'value);
    $b = store_int($b, 0, ((((1 + 4) + 4) + 64) + 32));
    if (((~ null?($params'code)) | (~ null?($params'data)))) {
        $b = __tact_store_bool($b, true);
        builder $bc = begin_cell();
        $bc = __tact_store_bool($bc, false);
        $bc = __tact_store_bool($bc, false);
        if ((~ null?($params'code))) {
            $bc = __tact_store_bool($bc, true);
            $bc = store_ref($bc, __tact_not_null($params'code));
        } else {
            $bc = __tact_store_bool($bc, false);
        }
        if ((~ null?($params'data))) {
            $bc = __tact_store_bool($bc, true);
            $bc = store_ref($bc, __tact_not_null($params'data));
        } else {
            $bc = __tact_store_bool($bc, false);
        }
        $bc = __tact_store_bool($bc, false);
        $b = __tact_store_bool($b, true);
        $b = store_ref($b, end_cell($bc));
    } else {
        $b = __tact_store_bool($b, false);
    }
    cell $body = $params'body;
    if ((~ null?($body))) {
        $b = __tact_store_bool($b, true);
        $b = store_ref($b, __tact_not_null($body));
    } else {
        $b = __tact_store_bool($b, false);
    }
    cell $c = end_cell($b);
    send_raw_message($c, $params'mode);
}

() $reply(cell $body) impure inline_ref {
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    $send((true, $ctx'sender, 0, (64 + 2), $body, null(), null()));
}

cell $__gen_String_asComment(slice $self) impure inline_ref {
    var ($self) = $self;
    tuple $b = __tact_string_builder_start_comment();
    $b~__tact_string_builder_append($self);
    return __tact_string_builder_end($b);
}

slice $__gen_NftManager_nft_collection_address((slice, cell, slice, int, int, int, int, slice) $self) impure inline_ref {
    var (($self'owner, $self'content_init, $self'nft_collection_address, $self'mint_price, $self'max_supply, $self'mint_date_start, $self'mint_date_end, $self'payout_address)) = $self;
    return $self'nft_collection_address;
}

_ $__gen_get_nft_collection_address() method_id(76510) {
    var self = __gen_load_NftManager();
    var res = $__gen_NftManager_nft_collection_address(self);
    return res;
}

(slice, slice, int, int, int, int, slice) $__gen_NftManager_get_manager_data((slice, cell, slice, int, int, int, int, slice) $self) impure inline_ref {
    var (($self'owner, $self'content_init, $self'nft_collection_address, $self'mint_price, $self'max_supply, $self'mint_date_start, $self'mint_date_end, $self'payout_address)) = $self;
    return ($self'owner, $self'nft_collection_address, $self'mint_price, $self'max_supply, $self'mint_date_start, $self'mint_date_end, $self'payout_address);
}

_ $__gen_get_get_manager_data() method_id(92262) {
    var self = __gen_load_NftManager();
    var res = $__gen_NftManager_get_manager_data(self);
    return __gen_ManagerData_to_external(res);
}

((slice, cell, slice, int, int, int, int, slice), ()) $__gen_NftManager_requireOwner((slice, cell, slice, int, int, int, int, slice) $self) impure inline_ref {
    var (($self'owner, $self'content_init, $self'nft_collection_address, $self'mint_price, $self'max_supply, $self'mint_date_start, $self'mint_date_end, $self'payout_address)) = $self;
    throw_unless(132, __tact_address_eq(__gen_Context_get_sender(__tact_context_get()), $self'owner));
    return (($self'owner, $self'content_init, $self'nft_collection_address, $self'mint_price, $self'max_supply, $self'mint_date_start, $self'mint_date_end, $self'payout_address), ());
}

slice $__gen_NftManager_owner((slice, cell, slice, int, int, int, int, slice) $self) impure inline_ref {
    var (($self'owner, $self'content_init, $self'nft_collection_address, $self'mint_price, $self'max_supply, $self'mint_date_start, $self'mint_date_end, $self'payout_address)) = $self;
    return $self'owner;
}

_ $__gen_get_owner() method_id(83229) {
    var self = __gen_load_NftManager();
    var res = $__gen_NftManager_owner(self);
    return res;
}

(((slice, cell, slice, int, int, int, int, slice)), ()) $__gen_NftManager_receive_SetNftCollectionAddress((slice, cell, slice, int, int, int, int, slice) $self, (slice) $msg) impure inline {
    var ($self'owner, $self'content_init, $self'nft_collection_address, $self'mint_price, $self'max_supply, $self'mint_date_start, $self'mint_date_end, $self'payout_address) = $self;
    var ($msg'nft_collection_address) = $msg;
    ($self'owner, $self'content_init, $self'nft_collection_address, $self'mint_price, $self'max_supply, $self'mint_date_start, $self'mint_date_end, $self'payout_address)~$__gen_NftManager_requireOwner();
    throw_unless(39618, __tact_address_eq($self'owner, $self'nft_collection_address));
    $self'nft_collection_address = $msg'nft_collection_address;
    return (($self'owner, $self'content_init, $self'nft_collection_address, $self'mint_price, $self'max_supply, $self'mint_date_start, $self'mint_date_end, $self'payout_address), ());
}

(((slice, cell, slice, int, int, int, int, slice)), ()) $__gen_NftManager_receive_ChangeOwnerOfCollection((slice, cell, slice, int, int, int, int, slice) $self, (slice) $msg) impure inline {
    var ($self'owner, $self'content_init, $self'nft_collection_address, $self'mint_price, $self'max_supply, $self'mint_date_start, $self'mint_date_end, $self'payout_address) = $self;
    var ($msg'new_owner) = $msg;
    ($self'owner, $self'content_init, $self'nft_collection_address, $self'mint_price, $self'max_supply, $self'mint_date_start, $self'mint_date_end, $self'payout_address)~$__gen_NftManager_requireOwner();
    int $restAmount = (__tact_my_balance() - 50000000);
    throw_unless(13674, ($restAmount >= 0));
    $self'owner = $msg'new_owner;
    return (($self'owner, $self'content_init, $self'nft_collection_address, $self'mint_price, $self'max_supply, $self'mint_date_start, $self'mint_date_end, $self'payout_address), ());
}

(((slice, cell, slice, int, int, int, int, slice)), ()) $__gen_NftManager_receive_EditData((slice, cell, slice, int, int, int, int, slice) $self, (int, cell, int, int, int, slice) $msg) impure inline {
    var ($self'owner, $self'content_init, $self'nft_collection_address, $self'mint_price, $self'max_supply, $self'mint_date_start, $self'mint_date_end, $self'payout_address) = $self;
    var ($msg'query_id, $msg'content, $msg'mint_price, $msg'mint_date_start, $msg'mint_date_end, $msg'payout_address) = $msg;
    ($self'owner, $self'content_init, $self'nft_collection_address, $self'mint_price, $self'max_supply, $self'mint_date_start, $self'mint_date_end, $self'payout_address)~$__gen_NftManager_requireOwner();
    int $restAmount = ((__tact_my_balance() - 50000000) - 50000000);
    throw_unless(13674, ($restAmount >= 0));
    $self'mint_price = $msg'mint_price;
    $self'mint_date_start = $msg'mint_date_start;
    $self'mint_date_end = $msg'mint_date_end;
    $self'payout_address = $msg'payout_address;
    $send((true, $self'nft_collection_address, 50000000, 0, __gen_writecell_UpdateContent(($msg'query_id, $msg'content)), null(), null()));
    return (($self'owner, $self'content_init, $self'nft_collection_address, $self'mint_price, $self'max_supply, $self'mint_date_start, $self'mint_date_end, $self'payout_address), ());
}

(((slice, cell, slice, int, int, int, int, slice)), ()) $__gen_NftManager_receive_MintSafe((slice, cell, slice, int, int, int, int, slice) $self, (int, int, slice) $msg) impure inline {
    var ($self'owner, $self'content_init, $self'nft_collection_address, $self'mint_price, $self'max_supply, $self'mint_date_start, $self'mint_date_end, $self'payout_address) = $self;
    var ($msg'query_id, $msg'next_item_index, $msg'item_owner) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    cell $item_content = end_cell(store_ref(__tact_store_address(begin_cell(), $msg'item_owner), $emptyCell()));
    int $pixelReward = ($self'mint_price / 20);
    int $restAmount = (((((__tact_my_balance() - 50000000) - $self'mint_price) - $pixelReward) - 50000000) - 30000000);
    throw_unless(13674, ($restAmount >= 0));
    throw_unless(47714, (($self'max_supply == 0) | ($msg'next_item_index < $self'max_supply)));
    throw_unless(23716, ($self'mint_date_start < now()));
    throw_unless(36032, (($self'mint_date_end == 0) | ($self'mint_date_end > now())));
    $send((true, $self'payout_address, $self'mint_price, 1, $__gen_String_asComment(__gen_str_3884301487()), null(), null()));
    $send((true, __tact_create_address(0, 40829073211017387707525970175388402652587852245746681944198239174303715381585), $pixelReward, 1, $__gen_String_asComment(__gen_str_3884301487()), null(), null()));
    $send((true, $self'nft_collection_address, 50000000, 0, __gen_writecell_Mint(($msg'query_id, $msg'next_item_index, 20000000, $item_content)), null(), null()));
    $send((true, $ctx'sender, $restAmount, 1, __gen_writecell_Excesses(($msg'query_id)), null(), null()));
    return (($self'owner, $self'content_init, $self'nft_collection_address, $self'mint_price, $self'max_supply, $self'mint_date_start, $self'mint_date_end, $self'payout_address), ());
}

(((slice, cell, slice, int, int, int, int, slice)), ()) $__gen_NftManager_receive_Deploy((slice, cell, slice, int, int, int, int, slice) $self, (int) $deploy) impure inline {
    var ($self'owner, $self'content_init, $self'nft_collection_address, $self'mint_price, $self'max_supply, $self'mint_date_start, $self'mint_date_end, $self'payout_address) = $self;
    var ($deploy'queryId) = $deploy;
    $reply(__gen_writecell_DeployOk(($deploy'queryId)));
    return (($self'owner, $self'content_init, $self'nft_collection_address, $self'mint_price, $self'max_supply, $self'mint_date_start, $self'mint_date_end, $self'payout_address), ());
}


() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = ((msg_flags & 1) == 1 ? true : false);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    
    ;; Handle bounced messages
    if (msg_bounced) {
        return ();
    }
    
    ;; Receive SetNftCollectionAddress message
    if (op == 435957060) {
        var self = __gen_load_NftManager();
        var msg = in_msg~__gen_read_SetNftCollectionAddress();
        self~$__gen_NftManager_receive_SetNftCollectionAddress(msg);
        __gen_store_NftManager(self);
        return ();
    }
    
    ;; Receive ChangeOwnerOfCollection message
    if (op == 1126980855) {
        var self = __gen_load_NftManager();
        var msg = in_msg~__gen_read_ChangeOwnerOfCollection();
        self~$__gen_NftManager_receive_ChangeOwnerOfCollection(msg);
        __gen_store_NftManager(self);
        return ();
    }
    
    ;; Receive EditData message
    if (op == 2226095555) {
        var self = __gen_load_NftManager();
        var msg = in_msg~__gen_read_EditData();
        self~$__gen_NftManager_receive_EditData(msg);
        __gen_store_NftManager(self);
        return ();
    }
    
    ;; Receive MintSafe message
    if (op == 3323304562) {
        var self = __gen_load_NftManager();
        var msg = in_msg~__gen_read_MintSafe();
        self~$__gen_NftManager_receive_MintSafe(msg);
        __gen_store_NftManager(self);
        return ();
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var self = __gen_load_NftManager();
        var msg = in_msg~__gen_read_Deploy();
        self~$__gen_NftManager_receive_Deploy(msg);
        __gen_store_NftManager(self);
        return ();
    }
    
    throw(130);
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.ownable"H >> 128
    );
}

_ get_abi_ipfs() {
    return "ipfs://QmVu9Y4JpFWYW5Admba99VEBkRToW1jCezB1ejXKWqSwLp";
}