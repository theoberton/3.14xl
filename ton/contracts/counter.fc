;; #include "imports/stdlib.fc"; ;; import the stdlib to have access to all standard functions

const op::increase = "op::increase"c; ;; create an opcode from string using the "c" prefix, this results in 0x7e8764ef opcode in this case

;; storage variables
global int ctx_id; ;; id is required to be able to create different instances of counters, because addresses in TON depend on the initial state of the contract
global int ctx_counter; ;; the counter itself

;; load_data populates storage variables using stored data (get_data())
() load_data() impure { ;; the impure modifier is needed because the compiler optimizes away any non-impure function the return value of which is not used
    var ds = get_data().begin_parse(); ;; begin_parse() converts cell to slice to read data from it

    ctx_id = ds~load_uint(32); ;; load id as 32 bit unsigned integer
    ctx_counter = ds~load_uint(32); ;; load counter as 32 bit unsigned integer

    ds.end_parse(); ;; end_parse() checks that the remaining slice is empty (if it isn't, it can indicate a mistake during serialization of data)
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure {
    set_data( ;; set_data() stores a cell into persistent storage
        begin_cell() ;; begin_cell() returns a builder - a type to create cells
            .store_uint(ctx_id, 32) ;; this layout needs to be the same as the one used in load_data()
            .store_uint(ctx_counter, 32)
            .end_cell() ;; end_cell() converts a builder into a cell
    );
}

;; recv_internal is the main function of the contract and is called when it receives a message
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4); ;; the first four bits of serialized message contain certain flags, one of which indicates whether the message is bounced
    ;; a message is bounced when a contract receives a bounceable message and throws during its processing
    ;; the bounced message is then returned to sender with `bounced` bit set, this is a way to handle errors in TON

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    load_data(); ;; here we populate the storage variables
    ;; in this case, it could also be done in the single op::increase handler, but generally you would want
    ;; to populate storage variables as soon as all preliminary checks which do not need storage pass

    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case
    ;; some contracts do not use query_id at all and do not have it in their messages, but for this one we will be reading it, but not using it

    if (op == op::increase) { ;; handle op::increase
        int increase_by = in_msg_body~load_uint(32); ;; read by how much we want to increase the counter
        ctx_counter += increase_by; ;; increase the counter
        save_data(); ;; when we change storage variables, we need to store the changed variables, so we call save_data()
        return (); ;; this message is handled so we return
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
    ;; if the message is bounceable, the contract will then bounce the message to the sender
    ;; and the sender will receive unspent coins and will know that this message failed
    ;; provided of course that the sender has code to handle bounced messages
}

;; get methods are a means to conveniently read contract data using, for example, HTTP APIs
;; they are marked with method_id
;; note that unlike in many other smart contract VMs, get methods cannot be called by other contracts
(int) get_counter() method_id {
    load_data(); ;; when a get method is called, storage variables are not populated, so we populate them first
    return ctx_counter; ;; then return the value
}

;; same deal as the previous get method, but this one returns the id of the counter
(int) get_id() method_id {
    load_data();
    return ctx_id;
}
