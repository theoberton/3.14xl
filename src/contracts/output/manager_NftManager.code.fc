#pragma version =0.4.2;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

int workchain() asm "0 PUSHINT";

() force_chain(slice addr) impure {
  (int wc, _) = parse_std_addr(addr);
  throw_unless(333, wc == workchain());
}

slice null_addr() asm "b{00} PUSHSLICE";
int flag::regular() asm "0x10 PUSHINT";
int flag::bounce() asm "0x8 PUSHINT";


slice __tact_verify_address(slice address) inline {
    throw_unless(136, address.slice_bits() == 267);
    var h = address.preload_uint(11);
    throw_unless(136, (h == 1024) | (h == 1279));
    throw_unless(137, h == 1024);
    return address;
}

(slice, slice) __tact_load_address(slice cs) inline {
    slice raw = cs~load_msg_addr();
    return (cs, __tact_verify_address(raw));
}

(slice, slice) __tact_load_address_opt(slice cs) inline {
    slice raw = cs~load_msg_addr();
    if (raw.preload_uint(2) != 0) {
        return (cs, __tact_verify_address(raw));
    } else {
        return (cs, null());
    }
}

builder __tact_store_address(builder b, slice address) inline {
    return b.store_slice(__tact_verify_address(address));
}

int __tact_my_balance() inline {
    return pair_first(get_balance());
}

forall X -> X __tact_not_null(X x) inline { throw_if(128, null?(x)); return x; }

global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_context_sys;

(int, slice, int, slice) __tact_context_get() inline { return __tact_context; }

slice __tact_context_get_sender() inline { return __tact_context_sender; }

builder __tact_store_bool(builder b, int v) inline {
    b = b.store_int(v, 1);
    return b;
}

int __tact_address_eq(slice a, slice b) inline {
    return equal_slice_bits(a, b);
}

tuple __tact_string_builder_start(builder b) inline {
    return tpush(tpush(empty_tuple(), b), null());
}

tuple __tact_string_builder_start_comment() inline {
    return __tact_string_builder_start(begin_cell().store_uint(0, 32));
}

cell __tact_string_builder_end(tuple builders) inline {
    (builder b, tuple tail) = uncons(builders);
    cell c = b.end_cell();
    while(~ null?(tail)) {
        (b, tail) = uncons(tail);
        c = b.store_ref(c).end_cell();
    }
    return c;
}

((tuple), ()) __tact_string_builder_append(tuple builders, slice sc) inline_ref {
    int sliceRefs = slice_refs(sc);
    int sliceBits = slice_bits(sc);

    while((sliceBits > 0) | (sliceRefs > 0)) {

        ;; Load the current builder
        (builder b, tuple tail) = uncons(builders);
        int remBytes = 127 - (builder_bits(b) / 8);
        int exBytes = sliceBits / 8;

        ;; Append bits
        int amount = min(remBytes, exBytes);
        if (amount > 0) {
            slice read = sc~load_bits(amount * 8);
            b = b.store_slice(read);
        }

        ;; Update builders
        builders = cons(b, tail);

        ;; Check if we need to add a new cell and continue
        if (exBytes - amount > 0) {
            var bb = begin_cell();
            builders = cons(bb, builders);
            sliceBits = (exBytes - amount) * 8;
        } elseif (sliceRefs > 0) {
            sc = sc~load_ref().begin_parse();
            sliceRefs = slice_refs(sc);
            sliceBits = slice_bits(sc);
        } else {
            sliceBits = 0;
            sliceRefs = 0;
        }
    }

    return ((builders), ());
}

(slice, ((int))) __gen_read_Deploy(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

builder __gen_write_DeployOk(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell __gen_writecell_DeployOk((int) v) inline {
    return __gen_write_DeployOk(begin_cell(), v).end_cell();
}

builder __gen_write_Mint(builder build_0, (int, int, int, cell) v) inline {
    var (v'query_id, v'item_index, v'item_value, v'item_content) = v;
    build_0 = store_uint(build_0, 1, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = build_0.store_uint(v'item_index, 64);
    build_0 = build_0.store_coins(v'item_value);
    build_0 = build_0.store_ref(v'item_content);
    return build_0;
}

cell __gen_writecell_Mint((int, int, int, cell) v) inline {
    return __gen_write_Mint(begin_cell(), v).end_cell();
}

builder __gen_write_UpdateContent(builder build_0, (int, cell) v) inline {
    var (v'query_id, v'collection_content) = v;
    build_0 = store_uint(build_0, 4, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = build_0.store_ref(v'collection_content);
    return build_0;
}

cell __gen_writecell_UpdateContent((int, cell) v) inline {
    return __gen_write_UpdateContent(begin_cell(), v).end_cell();
}

(slice, ((int, int, slice))) __gen_read_MintSafe(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3323304562);
    var v'query_id = sc_0~load_uint(64);
    var v'next_item_index = sc_0~load_uint(64);
    var v'item_owner = sc_0~__tact_load_address_opt();
    return (sc_0, (v'query_id, v'next_item_index, v'item_owner));
}

(slice, ((int, cell, int, int, int, slice))) __gen_read_EditData(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 2226095555);
    var v'query_id = sc_0~load_uint(64);
    var v'content = sc_0~load_ref();
    var v'mint_price = sc_0~load_uint(64);
    var v'mint_date_start = sc_0~load_uint(32);
    var v'mint_date_end = sc_0~load_uint(32);
    var v'payout_address = sc_0~__tact_load_address();
    return (sc_0, (v'query_id, v'content, v'mint_price, v'mint_date_start, v'mint_date_end, v'payout_address));
}

(slice, ((slice))) __gen_read_ChangeOwnerOfCollection(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1126980855);
    var v'new_owner = sc_0~__tact_load_address();
    return (sc_0, (v'new_owner));
}

(slice, ((slice))) __gen_read_SetNftCollectionAddress(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 435957060);
    var v'nft_collection_address = sc_0~__tact_load_address();
    return (sc_0, (v'nft_collection_address));
}

builder __gen_write_Excesses(builder build_0, (int) v) inline {
    var (v'query_id) = v;
    build_0 = store_uint(build_0, 3576854235, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    return build_0;
}

cell __gen_writecell_Excesses((int) v) inline {
    return __gen_write_Excesses(begin_cell(), v).end_cell();
}

(slice, ((slice, int, int, int, int, slice, cell, int))) __gen_read_InitArgs(slice sc_0) inline_ref {
    var v'owner = sc_0~__tact_load_address();
    var v'mint_price = sc_0~load_coins();
    var v'max_supply = sc_0~load_uint(32);
    var v'mint_date_start = sc_0~load_uint(32);
    var v'mint_date_end = sc_0~load_uint(32);
    var v'payout_address = sc_0~__tact_load_address();
    var v'content_init = sc_0~load_ref();
    var v'is_pixel_fee_disabled = sc_0~load_int(1);
    return (sc_0, (v'owner, v'mint_price, v'max_supply, v'mint_date_start, v'mint_date_end, v'payout_address, v'content_init, v'is_pixel_fee_disabled));
}

builder __gen_write_NftManager(builder build_0, (slice, slice, int, int, int, int, slice, cell, int) v) inline {
    var (v'owner, v'nft_collection_address, v'mint_price, v'max_supply, v'mint_date_start, v'mint_date_end, v'payout_address, v'content_init, v'is_pixel_fee_disabled) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = __tact_store_address(build_0, v'nft_collection_address);
    build_0 = build_0.store_coins(v'mint_price);
    build_0 = build_0.store_uint(v'max_supply, 32);
    build_0 = build_0.store_uint(v'mint_date_start, 32);
    build_0 = build_0.store_uint(v'mint_date_end, 32);
    build_0 = __tact_store_address(build_0, v'payout_address);
    build_0 = build_0.store_ref(v'content_init);
    build_0 = build_0.store_int(v'is_pixel_fee_disabled, 1);
    return build_0;
}

(slice, ((slice, slice, int, int, int, int, slice, cell, int))) __gen_read_NftManager(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'nft_collection_address = sc_0~__tact_load_address();
    var v'mint_price = sc_0~load_coins();
    var v'max_supply = sc_0~load_uint(32);
    var v'mint_date_start = sc_0~load_uint(32);
    var v'mint_date_end = sc_0~load_uint(32);
    var v'payout_address = sc_0~__tact_load_address();
    var v'content_init = sc_0~load_ref();
    var v'is_pixel_fee_disabled = sc_0~load_int(1);
    return (sc_0, (v'owner, v'nft_collection_address, v'mint_price, v'max_supply, v'mint_date_start, v'mint_date_end, v'payout_address, v'content_init, v'is_pixel_fee_disabled));
}

_ __gen_Context_get_value((int, slice, int, slice) v) inline {
    var (v'bounced, v'sender, v'value, v'raw) = v;
    return v'value;
}

(slice, slice, int, int, int, int, slice) __gen_ManagerData_to_external(((slice, slice, int, int, int, int, slice)) v) inline {
    var (v'owner, v'nft_collection_address, v'mint_price, v'max_supply, v'mint_date_start, v'mint_date_end, v'payout_address) = v; 
    return (v'owner, v'nft_collection_address, v'mint_price, v'max_supply, v'mint_date_start, v'mint_date_end, v'payout_address);
}

(slice, (((slice, int, int, int, int, slice, cell, int)))) __gen_read_$init$NftManager(slice sc_0) inline {
    var v'initArgs = sc_0~__gen_read_InitArgs();
    return (sc_0, (v'initArgs));
}

(slice, slice, int, int, int, int, slice, cell, int) $__gen_NftManager_init((slice, int, int, int, int, slice, cell, int) $initArgs) impure inline_ref {
    var (($initArgs'owner, $initArgs'mint_price, $initArgs'max_supply, $initArgs'mint_date_start, $initArgs'mint_date_end, $initArgs'payout_address, $initArgs'content_init, $initArgs'is_pixel_fee_disabled)) = $initArgs;
    var (($self'owner, $self'nft_collection_address, $self'mint_price, $self'max_supply, $self'mint_date_start, $self'mint_date_end, $self'payout_address, $self'content_init, $self'is_pixel_fee_disabled)) = (null(), null(), null(), null(), null(), null(), null(), null(), null());
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    $self'owner = $initArgs'owner;
    $self'nft_collection_address = $initArgs'owner;
    $self'mint_price = $initArgs'mint_price;
    $self'max_supply = $initArgs'max_supply;
    $self'mint_date_start = $initArgs'mint_date_start;
    $self'mint_date_end = $initArgs'mint_date_end;
    $self'payout_address = $initArgs'payout_address;
    $self'content_init = $initArgs'content_init;
    $self'is_pixel_fee_disabled = $initArgs'is_pixel_fee_disabled;
    return ($self'owner, $self'nft_collection_address, $self'mint_price, $self'max_supply, $self'mint_date_start, $self'mint_date_end, $self'payout_address, $self'content_init, $self'is_pixel_fee_disabled);
}

(slice, slice, int, int, int, int, slice, cell, int) __gen_load_NftManager() impure inline {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~__gen_read_NftManager();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        ((slice, int, int, int, int, slice, cell, int) initArgs) = $sc~__gen_read_$init$NftManager();
        $sc.end_parse();
        return $__gen_NftManager_init(initArgs);
    }
}

() __gen_store_NftManager((slice, slice, int, int, int, int, slice, cell, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = __gen_write_NftManager(b, v);
    set_data(b.end_cell());
}

;; String "NFT item minted"
slice __gen_str_3884301487() asm "B{b5ee9c7241010101001100001e4e4654206974656d206d696e746564af01325a} B>boc <s PUSHSLICE";

cell $emptyCell() impure inline_ref {
    return end_cell(begin_cell());
}

() $send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref {
    var (($params'bounce, $params'to, $params'value, $params'mode, $params'body, $params'code, $params'data)) = $params;
    builder $b = begin_cell();
    $b = store_int($b, 1, 2);
    $b = __tact_store_bool($b, $params'bounce);
    $b = store_int($b, 0, 3);
    $b = __tact_store_address($b, $params'to);
    $b = store_coins($b, $params'value);
    $b = store_int($b, 0, ((((1 + 4) + 4) + 64) + 32));
    if (((~ null?($params'code)) | (~ null?($params'data)))) {
        $b = __tact_store_bool($b, true);
        builder $bc = begin_cell();
        $bc = __tact_store_bool($bc, false);
        $bc = __tact_store_bool($bc, false);
        if ((~ null?($params'code))) {
            $bc = __tact_store_bool($bc, true);
            $bc = store_ref($bc, __tact_not_null($params'code));
        } else {
            $bc = __tact_store_bool($bc, false);
        }
        if ((~ null?($params'data))) {
            $bc = __tact_store_bool($bc, true);
            $bc = store_ref($bc, __tact_not_null($params'data));
        } else {
            $bc = __tact_store_bool($bc, false);
        }
        $bc = __tact_store_bool($bc, false);
        $b = __tact_store_bool($b, true);
        $b = store_ref($b, end_cell($bc));
    } else {
        $b = __tact_store_bool($b, false);
    }
    cell $body = $params'body;
    if ((~ null?($body))) {
        $b = __tact_store_bool($b, true);
        $b = store_ref($b, __tact_not_null($body));
    } else {
        $b = __tact_store_bool($b, false);
    }
    cell $c = end_cell($b);
    send_raw_message($c, $params'mode);
}

((int, slice, int, int, cell, cell, cell)) __gen_constructor_SendParameters$bounce_to_value_mode_body(int bounce, slice to, int value, int mode, cell body) inline {
    return (bounce, to, value, mode, body, null(), null());
}

() $reply(cell $body) impure inline_ref {
    $send(__gen_constructor_SendParameters$bounce_to_value_mode_body(true, __tact_context_get_sender(), 0, (64 + 2), $body));
}

cell $__gen_String_asComment(slice $self) impure inline_ref {
    var ($self) = $self;
    tuple $b = __tact_string_builder_start_comment();
    $b~__tact_string_builder_append($self);
    return __tact_string_builder_end($b);
}

slice $__gen_NftManager_nft_collection_address((slice, slice, int, int, int, int, slice, cell, int) $self) impure inline_ref {
    var (($self'owner, $self'nft_collection_address, $self'mint_price, $self'max_supply, $self'mint_date_start, $self'mint_date_end, $self'payout_address, $self'content_init, $self'is_pixel_fee_disabled)) = $self;
    return $self'nft_collection_address;
}

_ $__gen_get_nft_collection_address() method_id(76510) {
    var self = __gen_load_NftManager();
    var res = $__gen_NftManager_nft_collection_address(self);
    return res;
}

((slice, slice, int, int, int, int, slice)) __gen_constructor_ManagerData$owner_nft_collection_address_mint_price_max_supply_mint_date_start_mint_date_end_payout_address(slice owner, slice nft_collection_address, int mint_price, int max_supply, int mint_date_start, int mint_date_end, slice payout_address) inline {
    return (owner, nft_collection_address, mint_price, max_supply, mint_date_start, mint_date_end, payout_address);
}

(slice, slice, int, int, int, int, slice) $__gen_NftManager_get_manager_data((slice, slice, int, int, int, int, slice, cell, int) $self) impure inline_ref {
    var (($self'owner, $self'nft_collection_address, $self'mint_price, $self'max_supply, $self'mint_date_start, $self'mint_date_end, $self'payout_address, $self'content_init, $self'is_pixel_fee_disabled)) = $self;
    return __gen_constructor_ManagerData$owner_nft_collection_address_mint_price_max_supply_mint_date_start_mint_date_end_payout_address($self'owner, $self'nft_collection_address, $self'mint_price, $self'max_supply, $self'mint_date_start, $self'mint_date_end, $self'payout_address);
}

_ $__gen_get_get_manager_data() method_id(92262) {
    var self = __gen_load_NftManager();
    var res = $__gen_NftManager_get_manager_data(self);
    return __gen_ManagerData_to_external(res);
}

((slice, slice, int, int, int, int, slice, cell, int), ()) $__gen_NftManager_requireOwner((slice, slice, int, int, int, int, slice, cell, int) $self) impure inline_ref {
    var (($self'owner, $self'nft_collection_address, $self'mint_price, $self'max_supply, $self'mint_date_start, $self'mint_date_end, $self'payout_address, $self'content_init, $self'is_pixel_fee_disabled)) = $self;
    throw_unless(132, __tact_address_eq(__tact_context_get_sender(), $self'owner));
    return (($self'owner, $self'nft_collection_address, $self'mint_price, $self'max_supply, $self'mint_date_start, $self'mint_date_end, $self'payout_address, $self'content_init, $self'is_pixel_fee_disabled), ());
}

slice $__gen_NftManager_owner((slice, slice, int, int, int, int, slice, cell, int) $self) impure inline_ref {
    var (($self'owner, $self'nft_collection_address, $self'mint_price, $self'max_supply, $self'mint_date_start, $self'mint_date_end, $self'payout_address, $self'content_init, $self'is_pixel_fee_disabled)) = $self;
    return $self'owner;
}

_ $__gen_get_owner() method_id(83229) {
    var self = __gen_load_NftManager();
    var res = $__gen_NftManager_owner(self);
    return res;
}

(((slice, slice, int, int, int, int, slice, cell, int)), ()) $__gen_NftManager_receive_SetNftCollectionAddress((slice, slice, int, int, int, int, slice, cell, int) $self, (slice) $msg) impure inline {
    var ($self'owner, $self'nft_collection_address, $self'mint_price, $self'max_supply, $self'mint_date_start, $self'mint_date_end, $self'payout_address, $self'content_init, $self'is_pixel_fee_disabled) = $self;
    var ($msg'nft_collection_address) = $msg;
    ($self'owner, $self'nft_collection_address, $self'mint_price, $self'max_supply, $self'mint_date_start, $self'mint_date_end, $self'payout_address, $self'content_init, $self'is_pixel_fee_disabled)~$__gen_NftManager_requireOwner();
    throw_unless(39618, __tact_address_eq($self'owner, $self'nft_collection_address));
    $self'nft_collection_address = $msg'nft_collection_address;
    return (($self'owner, $self'nft_collection_address, $self'mint_price, $self'max_supply, $self'mint_date_start, $self'mint_date_end, $self'payout_address, $self'content_init, $self'is_pixel_fee_disabled), ());
}

(((slice, slice, int, int, int, int, slice, cell, int)), ()) $__gen_NftManager_receive_ChangeOwnerOfCollection((slice, slice, int, int, int, int, slice, cell, int) $self, (slice) $msg) impure inline {
    var ($self'owner, $self'nft_collection_address, $self'mint_price, $self'max_supply, $self'mint_date_start, $self'mint_date_end, $self'payout_address, $self'content_init, $self'is_pixel_fee_disabled) = $self;
    var ($msg'new_owner) = $msg;
    ($self'owner, $self'nft_collection_address, $self'mint_price, $self'max_supply, $self'mint_date_start, $self'mint_date_end, $self'payout_address, $self'content_init, $self'is_pixel_fee_disabled)~$__gen_NftManager_requireOwner();
    int $restAmount = (__tact_my_balance() - 50000000);
    throw_unless(13674, ($restAmount >= 0));
    $self'owner = $msg'new_owner;
    return (($self'owner, $self'nft_collection_address, $self'mint_price, $self'max_supply, $self'mint_date_start, $self'mint_date_end, $self'payout_address, $self'content_init, $self'is_pixel_fee_disabled), ());
}

((int, slice, int, int, cell, cell, cell)) __gen_constructor_SendParameters$to_value_body(slice to, int value, cell body) inline {
    return (true, to, value, 0, body, null(), null());
}

((int, cell)) __gen_constructor_UpdateContent$query_id_collection_content(int query_id, cell collection_content) inline {
    return (query_id, collection_content);
}

((int)) __gen_constructor_Excesses$query_id(int query_id) inline {
    return (query_id);
}

(((slice, slice, int, int, int, int, slice, cell, int)), ()) $__gen_NftManager_receive_EditData((slice, slice, int, int, int, int, slice, cell, int) $self, (int, cell, int, int, int, slice) $msg) impure inline {
    var ($self'owner, $self'nft_collection_address, $self'mint_price, $self'max_supply, $self'mint_date_start, $self'mint_date_end, $self'payout_address, $self'content_init, $self'is_pixel_fee_disabled) = $self;
    var ($msg'query_id, $msg'content, $msg'mint_price, $msg'mint_date_start, $msg'mint_date_end, $msg'payout_address) = $msg;
    ($self'owner, $self'nft_collection_address, $self'mint_price, $self'max_supply, $self'mint_date_start, $self'mint_date_end, $self'payout_address, $self'content_init, $self'is_pixel_fee_disabled)~$__gen_NftManager_requireOwner();
    int $storageFee = max((50000000 - __tact_my_balance()), 0);
    int $restAmount = ((__gen_Context_get_value(__tact_context_get()) - $storageFee) - 20000000);
    throw_unless(13674, ($restAmount >= 0));
    $self'mint_price = $msg'mint_price;
    $self'mint_date_start = $msg'mint_date_start;
    $self'mint_date_end = $msg'mint_date_end;
    $self'payout_address = $msg'payout_address;
    $send(__gen_constructor_SendParameters$to_value_body($self'nft_collection_address, 20000000, __gen_writecell_UpdateContent(__gen_constructor_UpdateContent$query_id_collection_content($msg'query_id, $msg'content))));
    $send(__gen_constructor_SendParameters$to_value_body(__tact_context_get_sender(), $restAmount, __gen_writecell_Excesses(__gen_constructor_Excesses$query_id($msg'query_id))));
    return (($self'owner, $self'nft_collection_address, $self'mint_price, $self'max_supply, $self'mint_date_start, $self'mint_date_end, $self'payout_address, $self'content_init, $self'is_pixel_fee_disabled), ());
}

((int, slice, int, int, cell, cell, cell)) __gen_constructor_SendParameters$to_value_mode_body(slice to, int value, int mode, cell body) inline {
    return (true, to, value, mode, body, null(), null());
}

;; ;; EQAkL7VQ5_K7Ksc_J2xnAM_umLjed1aPekxOk0drbQcnGfWy
slice __gen_slice_address_d78b550aaa9750d9d9cefa48a13776d0c56f2aec64ae92bd04598a5152c3ee1e() asm "B{b5ee9c72410101010024000043800485f6aa1cfe576558e7e4ed8ce019fdd3171bceead1ef4989d268ed6da0e4e330aee6b07d} B>boc <s PUSHSLICE";

((int, int, int, cell)) __gen_constructor_Mint$query_id_item_index_item_value_item_content(int query_id, int item_index, int item_value, cell item_content) inline {
    return (query_id, item_index, item_value, item_content);
}

(((slice, slice, int, int, int, int, slice, cell, int)), ()) $__gen_NftManager_receive_MintSafe((slice, slice, int, int, int, int, slice, cell, int) $self, (int, int, slice) $msg) impure inline {
    var ($self'owner, $self'nft_collection_address, $self'mint_price, $self'max_supply, $self'mint_date_start, $self'mint_date_end, $self'payout_address, $self'content_init, $self'is_pixel_fee_disabled) = $self;
    var ($msg'query_id, $msg'next_item_index, $msg'item_owner) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    slice $minterAddress = $ctx'sender;
    if ((~ null?($msg'item_owner))) {
        $minterAddress = __tact_not_null($msg'item_owner);
    }
    cell $item_content = end_cell(store_ref(__tact_store_address(begin_cell(), $minterAddress), $emptyCell()));
    int $pixelReward = 0;
    if ((~ $self'is_pixel_fee_disabled)) {
        $pixelReward = ($self'mint_price / 20);
    }
    int $restAmount = (((((__tact_my_balance() - 50000000) - $self'mint_price) - $pixelReward) - 50000000) - 30000000);
    throw_unless(13674, ($restAmount >= 0));
    throw_unless(47714, (($self'max_supply == 0) | ($msg'next_item_index < $self'max_supply)));
    throw_unless(23716, ($self'mint_date_start < now()));
    throw_unless(36032, (($self'mint_date_end == 0) | ($self'mint_date_end > now())));
    if (($self'mint_price > 0)) {
        $send(__gen_constructor_SendParameters$to_value_mode_body($self'payout_address, $self'mint_price, 1, $__gen_String_asComment(__gen_str_3884301487())));
        if ((~ $self'is_pixel_fee_disabled)) {
            $send(__gen_constructor_SendParameters$to_value_mode_body(__gen_slice_address_d78b550aaa9750d9d9cefa48a13776d0c56f2aec64ae92bd04598a5152c3ee1e(), $pixelReward, 1, $__gen_String_asComment(__gen_str_3884301487())));
        }
    }
    $send(__gen_constructor_SendParameters$to_value_body($self'nft_collection_address, 50000000, __gen_writecell_Mint(__gen_constructor_Mint$query_id_item_index_item_value_item_content($msg'query_id, $msg'next_item_index, 20000000, $item_content))));
    $send(__gen_constructor_SendParameters$to_value_mode_body($ctx'sender, $restAmount, 1, __gen_writecell_Excesses(__gen_constructor_Excesses$query_id($msg'query_id))));
    return (($self'owner, $self'nft_collection_address, $self'mint_price, $self'max_supply, $self'mint_date_start, $self'mint_date_end, $self'payout_address, $self'content_init, $self'is_pixel_fee_disabled), ());
}

((int)) __gen_constructor_DeployOk$queryId(int queryId) inline {
    return (queryId);
}

(((slice, slice, int, int, int, int, slice, cell, int)), ()) $__gen_NftManager_receive_Deploy((slice, slice, int, int, int, int, slice, cell, int) $self, (int) $deploy) impure inline {
    var ($self'owner, $self'nft_collection_address, $self'mint_price, $self'max_supply, $self'mint_date_start, $self'mint_date_end, $self'payout_address, $self'content_init, $self'is_pixel_fee_disabled) = $self;
    var ($deploy'queryId) = $deploy;
    $reply(__gen_writecell_DeployOk(__gen_constructor_DeployOk$queryId($deploy'queryId)));
    return (($self'owner, $self'nft_collection_address, $self'mint_price, $self'max_supply, $self'mint_date_start, $self'mint_date_end, $self'payout_address, $self'content_init, $self'is_pixel_fee_disabled), ());
}

((slice, slice, int, int, int, int, slice, cell, int), int) __gen_router_NftManager((slice, slice, int, int, int, int, slice, cell, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Receive SetNftCollectionAddress message
    if (op == 435957060) {
        var msg = in_msg~__gen_read_SetNftCollectionAddress();
        self~$__gen_NftManager_receive_SetNftCollectionAddress(msg);
        return (self, true);
    }
    
    ;; Receive ChangeOwnerOfCollection message
    if (op == 1126980855) {
        var msg = in_msg~__gen_read_ChangeOwnerOfCollection();
        self~$__gen_NftManager_receive_ChangeOwnerOfCollection(msg);
        return (self, true);
    }
    
    ;; Receive EditData message
    if (op == 2226095555) {
        var msg = in_msg~__gen_read_EditData();
        self~$__gen_NftManager_receive_EditData(msg);
        return (self, true);
    }
    
    ;; Receive MintSafe message
    if (op == 3323304562) {
        var msg = in_msg~__gen_read_MintSafe();
        self~$__gen_NftManager_receive_MintSafe(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~__gen_read_Deploy();
        self~$__gen_NftManager_receive_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = ((msg_flags & 1) == 1 ? true : false);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = __gen_load_NftManager();
    
    ;; Handle operation
    int handled = self~__gen_router_NftManager(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(handled, 130);
    
    ;; Persist state
    __gen_store_NftManager(self);
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128,
        "org.ton.ownable"H >> 128
    );
}

_ get_abi_ipfs() {
    return "ipfs://QmanDCwquyzxYWtHMzceJ4A269qAndp9VX3wRSTYuoZmoz";
}

_ lazy_deployment_completed() {
    return get_data().begin_parse().load_int(1);
}
